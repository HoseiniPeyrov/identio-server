/// *** Server *** ///

buildscript {
    ext {
        springBootVersion = '1.5.8.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath 'org.owasp:dependency-check-gradle:3.0.1'
        classpath "io.spring.gradle:dependency-management-plugin:1.0.3.RELEASE"
    }
}

plugins {
    id 'com.moowork.node' version '1.2.0'
    id 'com.moowork.grunt' version '1.2.0'
    id 'com.github.ben-manes.versions' version '0.17.0'
    id 'org.springframework.boot' version '1.5.8.RELEASE'
    id 'org.owasp.dependencycheck' version '3.0.1'
    id 'io.spring.dependency-management' version '1.0.3.RELEASE'
}

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'jacoco'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    maven { url "https://jitpack.io" }
}

configurations {
    providedRuntime
}

dependencyManagement {
    imports {
        mavenBom 'org.springframework.cloud:spring-cloud-vault-dependencies:1.0.2.RELEASE'
    }
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
    compile("com.zaxxer:HikariCP:2.7.3")
    compile("org.liquibase:liquibase-core")
    compile("org.springframework.security:spring-security-web:4.1.2.RELEASE")
    compile("org.springframework.cloud:spring-cloud-config-server:1.3.3.RELEASE")
    compile("org.springframework.cloud:spring-cloud-starter-vault-config")
    compile('org.apache.commons:commons-pool2:2.4.3')
    compile('com.github.identio:identio-saml:2.0.1')
    compile('com.google.guava:guava:23.5-jre')
    compile('com.github.identio:jradius-client:-SNAPSHOT')
    compile('com.auth0:java-jwt:3.3.0')
    compile('ch.qos.logback:logback-core:1.2.3')
    compile('ch.qos.logback:logback-classic:1.2.3')
    testCompile("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")
    testCompile("org.apache.httpcomponents:httpclient:4.5.3")
    testRuntime("com.h2database:h2:1.4.196")
}

springBoot {
    mainClass = "net.identio.server.boot.IdentioServerApplication"
}

bootRun {
    systemProperties = ['logging.config': 'file:./config/logback.xml']
}

jacocoTestReport {
    reports {
        xml.enabled = true
    }
}

/// *** UI *** ///

node {
    // Version of node to use.
    version = '8.9.1'

    // Version of npm to use.
    npmVersion = '5.4.2'

    // Base URL for fetching node distributions (change if you have a mirror).
    distBaseUrl = 'https://nodejs.org/dist'

    // If true, it will download node using above parameters.
    // If false, it will try to use globally installed node.
    download = true

    // Set the work directory for unpacking node
    workDir = file("${project.buildDir}/ui")

    // Set the work directory where node_modules should be located
    nodeModulesDir = file("${project.projectDir}/ui")
}

grunt {
    // Set the directory where Gruntfile.js should be found
    workDir = file("${project.projectDir}/ui")

    // Whether colors should output on the terminal
    colors = true

    // Whether output from Grunt should be buffered - useful when running tasks in parallel
    bufferOutput = false
}

task bowerInstall(type: NodeTask) {
    script = file('ui/node_modules/bower/lib/bin/bower.js')
    args = ['install', '--allow-root']
    execOverrides {
        it.ignoreExitValue = true
        it.workingDir = file("${project.projectDir}/ui")
    }
}

/// *** Packaging *** ///

def distributionsCopySpec = copySpec {
    into("identio-server") {

        from 'README.md'
        from 'LICENSE'

        into('bin') {
            from 'scripts/password-generator'
            from 'scripts/start'
            fileMode 0755
        }
        into('lib') {
            from(jar)
            from(project.configurations.runtime)
            exclude 'spring-boot-devtools-*'
        }
        into('config') {
            from 'config'
        }
        into('ui') {
            from 'ui/dist'
        }
    }
}

grunt_build.mustRunAfter bowerInstall
bowerInstall.mustRunAfter npmInstall
npmInstall.mustRunAfter clean
jar.mustRunAfter clean

task releaseZip(type: Zip, dependsOn: ['clean', 'test', 'jar', 'bowerInstall', 'npmInstall', 'grunt_build']) {
    description 'Build a release in zip format'
    with distributionsCopySpec
    archiveName = "identio-server.zip"
}

task releaseTarGz(type: Tar, dependsOn: ['clean', 'test', 'jar', 'bowerInstall', 'npmInstall', 'grunt_build']) {
    description 'Build a release in tar.gz format'
    compression = Compression.GZIP
    with distributionsCopySpec
    archiveName = "identio-server.tar.gz"
}

task release(dependsOn: ['releaseTarGz', 'releaseZip']) {
    description 'Build release in zip and tar.gz format'
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.3.1'
}
